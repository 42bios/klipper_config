#####################################################################
# 	Display Menu definition                                         #
#####################################################################
#                  Removed Items of the Stock menu                  #
#####################################################################
##  Octoprint 
[menu __main __octoprint]
type: disabled

##  PreHeat
[menu __main __temp __preheat_pla]
type: disabled

[menu __main __temp __preheat_abs]
type: disabled

##  Fan (move under FAN menu item)
[menu __main __control __fanonoff]
type: disabled

[menu __main __control __fanspeed]
type: disabled

##  use own load and unload macro
[menu __main __filament __loadf]
type: disabled

[menu __main __filament __loads]
type: disabled

[menu __main __filament __unloadf]
type: disabled

[menu __main __filament __unloads]
type: disabled

##  Delta Calibration
[menu __main __setup __calib __delta_calib_auto]
type: disabled

[menu __main __setup __calib __delta_calib_man]
type: disabled

#####################################################################
#                  Overload Items of the Stock menu                 # 
#####################################################################
##  Caselight on off
[menu __main __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    {% if menu.input %}
      _CASELIGHT_ON
    {% else %}
      _CASELIGHT_OFF
    {% endif %}

##  Move (use limits from the print variable)
[menu __main __control __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: {printer.toolhead.axis_minimum.z}
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: {printer.toolhead.axis_minimum.z}
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: {printer.toolhead.axis_minimum.z}
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

## Make SD card menu working with moonraker/mainsail
[menu __main __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: SD Card

[menu __main __sdcard __start]
type: command
enable: {printer.print_stats.state == "standby"}
name: Start print
gcode:
  M24

[menu __main __sdcard __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume print
gcode:
  RESUME

[menu __main __sdcard __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause print
gcode:
  PAUSE
  
#####################################################################
#                   Added Items to the Stock menu                   #
#####################################################################
## add SD card entries
[menu __main __sdcard __file]
type: command
name: File: {printer.print_stats.filename}
index: 0

[menu __main __sdcard __load]
type: vsdlist
enable: {printer.print_stats.state == "standby"}
name: Load file

[menu __main __sdcard __unload]
type: command
enable: {printer.print_stats.state == "standby"}
name: Unload file
gcode:
  SDCARD_RESET_FILE

[menu __main __sdcard __cancel]
type: command
enable: {printer.print_stats.state == "paused"}
name: Cancel print
gcode:
  CANCEL_PRINT

## Power Off
[menu __main __power_off]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Power Off
index: 0
gcode:
    {menu.exit()}
    PRINTER_OFF
    
##  Add filament load and unload macro
[menu __main __filament __load]
type: command
name: Load Filament
gcode:
  FILAMENT_LOAD
  
[menu __main __filament __unload]
type: command
name: Unload Filament
gcode:
  FILAMENT_UNLOAD
    
## PROBE_CALIBRATE
[menu __main __setup __calib __probe_Z_offset]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Probe Z offset

[menu __main __setup __calib __probe_Z_offset __start]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Start probing
gcode:
    PROBE_CALIBRATE

[menu __main __setup __calib __probe_Z_offset __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __probe_Z_offset __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 5
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}
    
[menu __main __setup __calib __probe_Z_offset __test_z_live]
type: input
name: Test Z :{'%05.3f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: -5
input_max: 15
input_step: 0.05
realtime: True
gcode:
  TESTZ Z={menu.input - printer.gcode_move.gcode_position.z} 

[menu __main __setup __calib __probe_Z_offset __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __probe_Z_offset __abort]
type: command
name: Abort
gcode: ABORT

## Z_ENDSTOP_CALIBRATE
[menu __main __setup __calib __z_endstop]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Z endstop

[menu __main __setup __calib __z_endstop __start]
type: command
name: Start probing
gcode:
    Z_ENDSTOP_CALIBRATE

[menu __main __setup __calib __z_endstop __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __z_endstop __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 5
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __z_endstop __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __z_endstop __abort]
type: command
name: Abort
gcode: ABORT

## Park Position
[menu __main __control __park_pos]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
index: 0
name: Positon: {['Bed','Center','Rear','Front'][menu.input|int]}
input: 0
input_min: 0
input_max: 3
gcode:
    {%- if menu.event == 'long_click' -%}
      {%- if menu.input|int == 1 -%}
        PARKCENTER
      {%- elif menu.input|int == 2 -%}
        PARKREAR
      {%- elif menu.input|int == 3 -%}
        PARKFRONT
      {%- else -%}
        PARKBED
      {%- endif -%}
    {%- endif -%}

## FAN Menu for fan and Chamber
[menu __main __control __fan]
type: list
name: Fan
index: 5

[menu __main __control __fan __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __main __control __fan __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __control __fan __chamberonoff]
type: input
enable: {'temperature_fan chamber' in printer}
name: Chamber: {'ON ' if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M141 S{10 if menu.input else 60}    
    
[menu __main __control __fan __Chamberfanspeed]
type: input
enable: {'temperature_fan chamber' in printer}
name: Chamber: {'%2d' % (menu.input)} C
input: {printer['temperature_fan chamber'].target}
input_min: 10
input_max: 70
input_step: 1
gcode:
    M141 S{'%d' % (menu.input*255)}  
    
    